{
package grammar

import (
   "strconv"
   "strings"

   "github.com/mitchellh/pointerstructure"
)
}

Input <- _? "(" _? expr:OrExpression _? ")" _? EOF {
   return expr, nil
} / _? expr:OrExpression _? EOF {
   return expr, nil
}

OrExpression <- left:AndExpression _ "or" _ right:OrExpression {
   return &BinaryExpression{
      Operator: BinaryOpOr,
      Left: left.(Expression),
      Right: right.(Expression),
   }, nil
} / expr:AndExpression {
   return expr, nil
}

AndExpression <- left:NotExpression _ "and" _ right:AndExpression {
   return &BinaryExpression{
      Operator: BinaryOpAnd,
      Left: left.(Expression),
      Right: right.(Expression),
   }, nil
} / expr:NotExpression {
   return expr, nil
}

NotExpression <- "not" _ expr:NotExpression {
   if unary, ok := expr.(*UnaryExpression); ok && unary.Operator == UnaryOpNot {
      // small optimization to get rid unnecessary levels of AST nodes
      // for things like:  not not foo == 3  which is equivalent to foo == 3
      return unary.Operand, nil
   }

   return &UnaryExpression{
      Operator: UnaryOpNot,
      Operand: expr.(Expression),
   }, nil
} / expr:ParenthesizedExpression {
   return expr, nil
}

ParenthesizedExpression "grouping" <- "(" _? expr:ExpressionValue _? ")" {
   return expr, nil
} / "(" _? expr:OrExpression _? ")" {
   return expr, nil
} / expr:MatchExpression {
   return expr, nil
} / "(" _? OrExpression _? !")" &{
   return false, errors.New("Unmatched parentheses")
}

MatchExpression "match" <- MatchSelectorOpValue / MatchSelectorOp / MatchValueOpSelector

MatchSelectorOpValue "match" <- left:ExpressionValue operator:(MatchLowerOrEqual / MatchHigherOrEqual / MatchLower / MatchHigher / MatchEqual / MatchNotEqual / MatchContains / MatchNotContains / MatchMatches / MatchNotMatches) right:ExpressionValue {
   return &MatchExpression{Left: left.(*ExpressionValue), Operator: operator.(MatchOperator), Right: right.(*ExpressionValue)}, nil
}

MatchSelectorOp "match" <- left:Value operator:(MatchIsEmpty / MatchIsNotEmpty) {
   return &MatchExpression{
      Left: &ExpressionValue{
         Operator: MathOpValue,
         Left: left.(*MatchValue),
         Right: nil,
      }, 
      Operator: operator.(MatchOperator), 
      Right: nil,
   }, nil
}

MatchValueOpSelector "match" <- value:Value operator:(MatchIn / MatchNotIn) selector:Value {
   return &MatchExpression{
      Left: &ExpressionValue{
         Operator: MathOpValue,
         Left: selector.(*MatchValue),
         Right: nil,
      }, 
      Operator: operator.(MatchOperator), 
      Right: &ExpressionValue{
         Operator: MathOpValue,
         Left: value.(*MatchValue),
         Right: nil,
      }, 
   }, nil
} / Value operator:(MatchIn / MatchNotIn) !Selector &{
   return false, errors.New("Invalid selector")
}

MatchLowerOrEqual <- _? "<=" _? {
   return MatchLowerOrEqual, nil
}

MatchLower <- _? "<" _? {
   return MatchLower, nil
}

MatchHigherOrEqual <- _? ">=" _? {
   return MatchHigherOrEqual, nil
}

MatchHigher <- _? ">" _? {
   return MatchHigher, nil
}

MatchEqual <- _? "==" _? {
   return MatchEqual, nil
}
MatchNotEqual <- _? "!=" _? {
   return MatchNotEqual, nil
}
MatchIsEmpty <- _ "is" _ "empty" {
   return MatchIsEmpty, nil
}
MatchIsNotEmpty <- _"is" _ "not" _ "empty" {
   return MatchIsNotEmpty, nil
}
MatchIn <- _ "in" _ {
   return MatchIn, nil
}
MatchNotIn <- _ "not" _ "in" _ {
   return MatchNotIn, nil
}
MatchContains <- _ "contains" _ {
   return MatchIn, nil
}
MatchNotContains <- _ "not" _ "contains" _ {
   return MatchNotIn, nil
}
MatchMatches <- _ "matches" _ {
   return MatchMatches, nil
}
MatchNotMatches <- _ "not" _ "matches" _ {
   return MatchNotMatches, nil
}

Selector "selector" <- first:Identifier rest:SelectorOrIndex* {
   sel := Selector{
      Type: SelectorTypeBexpr,
      Path: []string{first.(string)},
   }
   if rest != nil {
      for _, v := range rest.([]interface{}) {
        sel.Path = append(sel.Path, v.(string))
      }
   }
   return sel, nil
} / '"' ptrsegs:JsonPointerSegment* '"' {
   sel := Selector{
      Type: SelectorTypeJsonPointer,
   }
   if ptrsegs != nil {
      for _, v := range ptrsegs.([]interface{}) {
         sel.Path = append(sel.Path, v.(string))
      }
   }

   // Validate and cache
   ptrStr := fmt.Sprintf("/%s", strings.Join(sel.Path, "/"))
   ptr, err := pointerstructure.Parse(ptrStr)
   if err != nil {
      return nil, fmt.Errorf("error validating json pointer: %w", err)
   }
   sel.Path = ptr.Parts

   return sel, nil
}

JsonPointerSegment <- '/' ident:[\pL\pN-_.~:|]+ {
   return string(c.text)[1:], nil
}

Identifier <- [a-zA-Z] [a-zA-Z0-9_/]* {
   return string(c.text), nil
}

SelectorOrIndex <- "." ident:Identifier {
   return ident, nil
} / expr:IndexExpression {
   return expr, nil
} / "." idx:[0-9]+ {
   return string(c.text)[1:], nil
}

IndexExpression "index" <- "[" _? lit:StringLiteral _? "]" {
   return lit, nil
} / "[" _? !StringLiteral &{
   return false, errors.New("Invalid index")
} / "[" _? StringLiteral _? !"]" &{
   return false, errors.New("Unclosed index expression")
}

ExpressionValue <- left:Value operator:(MathOpPlus / MathOpMinus / MathOpMul / MathOpDiv) right:Value {
   return &ExpressionValue{
      Operator: operator.(MathOperator),
      Left: left,
      Right: right,
   }, nil
} / value:Value {
   return &ExpressionValue{
      Operator: MathOpValue,
      Left: value,
      Right: nil,
   }, nil
}

MathOpPlus <- _? "+" _? {
   return MathOpPlus, nil
}

MathOpMinus <- _? "-" _? {
   return MathOpMinus, nil
}

MathOpMul <- _? "*" _? {
   return MathOpMul, nil
}

MathOpDiv <- _? "/" _? {
   return MathOpDiv, nil
}

Value "value" <- b:TrueOrFalse {
   return &MatchValue{Type: ValueTypeBool, Raw: b.(string)}, nil
} / u:Undefined {
   return &MatchValue{Type: ValueTypeUndefined, Raw: u.(string)}, nil
} / selector:Selector {
   return &MatchValue{Selector:selector.(Selector), Type: ValueTypeReflect /*, Raw:selector.(Selector).String()*/}, nil
} / n:Float &AfterNumbers {
   return &MatchValue{Type: ValueTypeFloat64, Raw: n.(string)}, nil
} / n:Integer &AfterNumbers {
   return &MatchValue{Type: ValueTypeInt, Raw: n.(string)}, nil
} / n:Float !AfterNumbers {
   return false, errors.New("Invalid number literal")
} / n:Integer !AfterNumbers {
   return false, errors.New("Invalid number literal")
} / n:TrueOrFalse !AfterNumbers {
   return false, errors.New("Invalid bool literal")
} / s:StringLiteral {
   return &MatchValue{Type: ValueTypeString, Raw: s.(string)}, nil
}

Undefined "undefined" <- "undefined" &AfterNumbers {
   return string(c.text), nil
} / "undefined" !AfterNumbers &{
   return false, errors.New("Invalid undefined literal")
}

TrueOrFalse "bool" <- ("true" / "false") &AfterNumbers {
   return string(c.text), nil
} / ("true" / "false") !AfterNumbers &{
   return false, errors.New("Invalid bool literal")
}

AfterNumbers <- &(_ / EOF / ")")

Float <- "-"? ("0" / [1-9][0-9]*) ("." [0-9]+) {
   return string(c.text), nil
}

Integer <- "-"? ("0" / [1-9][0-9]*) {
   return string(c.text), nil
}

StringLiteral "string" <- ('`' RawStringChar* '`' / '"' DoubleStringChar* '"') {
  return strconv.Unquote(string(c.text))
} / ('`' RawStringChar* / '"' DoubleStringChar*) EOF &{
  return false, errors.New("Unterminated string literal")
}

RawStringChar <- !'`' .
DoubleStringChar <- !'"' .

_ "whitespace" <- [ \t\r\n]+

EOF <- !.
